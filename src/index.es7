/**
 * 传统版Ajax(基于XMLHttpRequest)
 * @author yutent<yutent.io@gmail.com>
 * @date 2020/08/03 17:05:10
 */

import { Format, toS } from './lib/format.js'

const noop = function(e, res) {
  this.defer.resolve(res)
}

const NOBODY_METHODS = ['GET', 'HEAD']
const FORM_TYPES = {
  form: 'application/x-www-form-urlencoded; charset=UTF-8',
  json: 'application/json; charset=UTF-8',
  text: 'text/plain; charset=UTF-8'
}
const ERRORS = {
  10001: 'Argument url is required',
  10012: 'Parse error',
  10100: 'Request canceled',
  10104: 'Request pending...',
  10200: 'Ok',
  10204: 'No content',
  10304: 'Not modified',
  10500: 'Internal Server Error',
  10504: 'Connected timeout'
}

Promise.defer = function() {
  var _ = {}
  _.promise = new Promise(function(y, n) {
    _.resolve = y
    _.reject = n
  })
  return _
}

class _Request {
  constructor(url = '', options = {}, { BASE_URL, __INIT__ }) {
    if (!url) {
      throw new Error(ERRORS[10001])
    }

    // url规范化
    url = url.replace(/#.*$/, '')

    if (BASE_URL) {
      if (!/^([a-z]+:|\/\/)/.test(url)) {
        url = BASE_URL + url
      }
    }

    options.method = (options.method || 'get').toUpperCase()

    this.xhr = new XMLHttpRequest()
    this.defer = Promise.defer()

    this.options = {
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'content-type': FORM_TYPES.form
      },
      body: null,
      cache: 'default',
      credentials: false, // 跨域选项,是否验证凭证
      signal: null, // 超时信号, 配置该项时, timeout不再生效
      timeout: 30000 // 超时时间, 单位毫秒, 默认30秒
    }

    if (!options.signal) {
      var control = new AbortController()
      options.signal = control.signal
    }
    this.defer.promise.abort = function() {
      control.abort()
    }

    var headers = this.options.headers

    if (__INIT__.headers) {
      Object.assign(headers, __INIT__.headers)
    }

    if (options.headers) {
      Object.assign(headers, options.headers)
      delete options.headers
    }

    Object.assign(this.options, __INIT__, options, { url, headers })

    this.__next__()
    return this.defer.promise
  }

  __next__() {
    var options = this.options
    var params = null
    var hasAttach = false // 是否有附件
    var crossDomain = false // 是否跨域
    var noBody = NOBODY_METHODS.includes(options.method)

    /* ------------------------  1»» 处理signal  ---------------------- */
    options.signal.onabort = _ => {
      this.cancel = true
      this.xhr.abort()
    }

    /* --------------------------  2»» 请求的内容 --------------------- */
    if (options.body) {
      var type = typeof options.body
      switch (type) {
        case 'number':
        case 'string':
          this.__type__('text')
          params = options.body
          break
        case 'object':
          // 解析表单DOM
          if (options.body.nodeName === 'FORM') {
            options.method = options.body.method.toUpperCase() || 'POST'

            params = Format.parseForm(options.body)
            hasAttach = params.constructor === FormData

            // 如果是一个 FormData对象,且为不允许携带body的方法,则直接改为POST
          } else if (options.body.constructor === FormData) {
            hasAttach = true
            if (noBody) {
              options.method = 'POST'
            }
            params = options.body
          } else {
            for (let k in options.body) {
              if (toS.call(options.body[k]) === '[object File]') {
                hasAttach = true
                break
              }
            }
            // 有附件,则改为FormData
            if (hasAttach) {
              if (noBody) {
                options.method = 'POST'
              }
              params = Format.mkFormData(options.body)
            } else {
              params = options.body
            }
          }
      }
    }
    if (hasAttach) {
      delete options.headers['content-type']
    }

    /* --------------------------  3»» 处理跨域  --------------------- */
    try {
      let $a = document.createElement('a')
      $a.href = options.url

      crossDomain =
        location.protocol !== $a.protocol || location.host !== $a.host
    } catch (err) {}

    if (crossDomain) {
      if (options.credentials) {
        this.xhr.withCredentials = true
      } else {
        delete options.headers['X-Requested-With']
      }
    }

    /* ------------- 4»» 根据method类型, 处理表单数据  ---------------- */

    // 拼接到url上
    if (noBody) {
      params = Format.param(params)
      if (params) {
        options.url += (~options.url.indexOf('?') ? '&' : '?') + params
      }
      if (options.cache === 'no-store') {
        options.url +=
          (~options.url.indexOf('?') ? '&' : '?') + '_t_=' + Date.now()
      }
    } else {
      if (!hasAttach) {
        if (~options.headers['content-type'].indexOf('json')) {
          params = JSON.stringify(params)
        } else {
          params = Format.param(params)
        }
      }
    }

    /* -----------------     5»» 设置响应的数据类型   ---------------- */
    // 统一使用blob, 再转为其他的
    this.xhr.responseType = 'blob'

    /* -----------------    6»» 构造请求    ------------------- */
    // 6.1
    this.xhr.onreadystatechange = ev => {
      if (options.timeout > 0) {
        options['time' + this.xhr.readyState] = ev.timeStamp
        if (this.xhr.readyState === 4) {
          options.isTimeout = options.time4 - options.time1 > options.timeout
        }
      }

      if (this.xhr.readyState !== 4) {
        return
      }

      this.__dispatch__(options.isTimeout)
    }

    // 6.2»» 初始化xhr
    this.xhr.open(options.method, options.url)

    // 6.3»» 设置头信息
    for (let k in options.headers) {
      this.xhr.setRequestHeader(k, options.headers[k])
    }

    // 6.4»» 发起网络请求
    this.xhr.send(params)

    // 6.5»» 超时处理
    if (options.timeout && options.timeout > 0) {
      this.xhr.timeout = options.timeout
    }
  }

  __type__(type) {
    this.options.headers['content-type'] = FORM_TYPES[type]
  }

  __dispatch__(isTimeout) {
    let result = {
      status: 200,
      statusText: 'ok',
      body: '',
      headers: Object.create(null)
    }

    // 主动取消
    if (this.cancel) {
      return this.__cancel__()
    }

    // 超时
    if (isTimeout) {
      return this.__timeout__()
    }

    // 是否请求成功(resful规范)
    let isSucc = this.xhr.status >= 200 && this.xhr.status < 400
    let headers = this.xhr.getAllResponseHeaders().split('\n') || []

    //处理返回的 Header, 拿到content-type
    for (let it of headers) {
      it = it.trim()
      if (it) {
        it = it.split(':')
        let k = it.shift().toLowerCase()
        it = it.join(':').trim()
        result.headers[k] = it
      }
    }

    if (isSucc) {
      result.status = this.xhr.status
      if (result.status === 204) {
        result.statusText = ERRORS[10204]
      } else if (result.status === 304) {
        result.statusText = ERRORS[10304]
      }
    } else {
      result.status = this.xhr.status || 500
      result.statusText = this.xhr.statusText || ERRORS[10500]
    }

    result.body = this.xhr.response

    this.__success__(isSucc, result)
  }

  __success__(isSucc, result) {
    var response = new _Response(
      result.status,
      result.statusText,
      result.body,
      result.headers
    )

    if (isSucc) {
      this.defer.resolve(response)
    } else {
      this.defer.reject(response)
    }
    delete this.xhr
    delete this.options
    delete this.defer
  }

  __cancel__(result) {
    var response = new _Response(0, ERRORS[10100], Object.create(null))

    this.defer.reject(response)

    delete this.xhr
    delete this.options
    delete this.defer
  }

  __timeout__(result) {
    var response = new _Response(504, ERRORS[10504], Object.create(null))

    this.defer.reject(response)

    delete this.xhr
    delete this.options
    delete this.defer
  }
}

class _Response {
  constructor(status = 200, statusText = 'OK', data = null, headers = {}) {
    this.status = status
    this.statusText = statusText
    this.ok = status >= 200 && status < 400
    this.headers = headers

    Object.defineProperty(this, '__R__', {
      value: data,
      writable: true,
      enumerable: false,
      configurable: true
    })
  }

  text() {
    return this.__R__.text()
  }

  json() {
    return this.__R__.text().then(t => {
      return JSON.parse(t)
    })
  }

  blob() {
    return this.__R__
  }

  arrayBuffer() {
    return this.__R__.arrayBuffer()
  }
}

const _fetch = function(url, options) {
  return new _Request(url, options, {
    BASE_URL: _fetch.BASE_URL,
    __INIT__: _fetch.__INIT__ || Object.create(null)
  })
}

_fetch.create = function(BASE_URL, __INIT__ = Object.create(null)) {
  return function(url, options) {
    return new _Request(url, options, { BASE_URL, __INIT__ })
  }
}

export default _fetch

/**
 * 传统版Ajax(基于XMLHttpRequest)
 * @author yutent<yutent.io@gmail.com>
 * @date 2020/08/03 17:05:10
 */

import Format from './lib/format.js'

const log = console.log

const noop = function(e, res) {
  this.defer.resolve(res)
}

const NOBODY_METHODS = ['GET', 'HEAD']
const FORM_TYPES = {
  form: 'application/x-www-form-urlencoded; charset=UTF-8',
  json: 'application/json; charset=UTF-8',
  text: 'text/plain; charset=UTF-8'
}
const ERRORS = {
  10001: 'Argument url is required',
  10012: 'Parse error',
  10100: 'Request canceled',
  10104: 'Request pending...',
  10200: 'Ok',
  10204: 'No content',
  10304: 'Not modified',
  10500: 'Internal Server Error',
  10504: 'Connected timeout'
}

const CONVERT = {
  text(val) {
    return val
  },
  xml(val, xml) {
    return xml !== undefined ? xml : Format.parseXML(val)
  },
  html(val) {
    return Format.parseHTML(val)
  },
  json(val) {
    return JSON.parse(val)
  },
  script(val) {
    return Format.parseJS(val)
  }
}

Promise.defer = function() {
  var _ = {}
  _.promise = new Promise(function(y, n) {
    _.resolve = y
    _.reject = n
  })
  return _
}

class _Instance {}

class _Request {
  constructor(url = '', options = {}) {
    if (!url) {
      throw new Error(ERRORS[10001])
    }

    // url规范化
    url = url.replace(/#.*$/, '')

    if (fetch.BASE_URL) {
      if (!/^([a-z]+:|\/\/)/.test(url)) {
        url = fetch.BASE_URL + url
      }
    }

    options.method = (options.method || 'get').toUpperCase()

    this.xhr = new XMLHttpRequest()
    this.defer = Promise.defer()

    this.options = {
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'content-type': FORM_TYPES.form
      },
      body: null,
      cache: 'default',
      referrer: '',
      credentials: false, // 跨域选项,是否验证凭证
      signal: null, // 超时信号, 配置该项时, timeout不再生效
      timeout: 30000 // 超时时间, 单位毫秒, 默认30秒
    }

    // 取消网络请求
    // this.defer.promise.abort = () => {
    //   this.cancel = true
    //   this.xhr.abort()
    // }
    Object.assign(this.options, fetch.__INIT__, options, { url })
    this.__next__()
    return this.defer.promise
  }

  __next__() {
    var options = this.options
    var params = null
    var hasAttach = false // 是否有附件
    var crossDomain = false // 是否跨域
    var control = new AbortController()

    /* ------------------------  1»» 处理超时  ---------------------- */
    // 如果有传入signal, 则删除timeout配置
    if (options.signal) {
      delete options.timeout
    } else {
      options.signal = control.signal
    }
    options.signal.onabort = _ => {
      this.cancel = true
      this.xhr.abort()
    }

    /* --------------------------  2»» 请求的内容 --------------------- */
    if (options.body) {
      var type = typeof options.body
      switch (type) {
        case 'number':
        case 'string':
          this.__type__('text')
          params = options.body
          break
        case 'object':
          // 解析表单DOM
          if (options.body.nodeName === 'FORM') {
            options.method = options.body.method.toUpperCase() || 'POST'

            params = Format.parseForm(options.body)
            hasAttach = params.constructor === FormData

            if (hasAttach) {
              delete options.headers['content-type']
            }
            // 如果是一个 FormData对象
            // 则直接改为POST
          } else if (options.body.constructor === FormData) {
            hasAttach = true
            options.method = 'POST'
            params = options.body
            delete options.headers['content-type']
          } else {
            // 有附件,则改为FormData
            if (hasAttach) {
              params = Format.mkFormData(options.body)
            } else {
              params = options.body
            }
          }
      }
    }

    /* --------------------------  3»» 处理跨域  --------------------- */
    try {
      let $a = document.createElement('a')
      $a.href = options.url

      crossDomain =
        location.protocol !== $a.protocol || location.host !== $a.host
    } catch (err) {}

    if (crossDomain) {
      if (options.credentials) {
        this.xhr.withCredentials = true
      } else {
        delete options.headers['X-Requested-With']
      }
    }

    /* ------------- 4»» 根据method类型, 处理g表单数据  ---------------- */
  }

  __type__(type) {
    this.options.headers['content-type'] = FORM_TYPES[type]
  }
}

class _Response {
  constructor(status = 200, data = null, headers = {}) {
    this.status = status
    this.statusText = 'OK'
    this.ok = true
    this.headers = headers
    this.__R__ = data
  }

  text() {
    return this.__R__.text()
  }

  json() {
    return this.__R__.text().then(t => {
      return JSON.parse(t)
    })
  }

  blob() {
    return this.__R__
  }

  arrayBuffer() {
    return this.__R__.arrayBuffer()
  }
}

function _fetch(url, param) {
  return new _Request(url, param)
}

export default _fetch
